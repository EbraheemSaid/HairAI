version: '3.8'

services:
  # Reverse Proxy
  nginx:
    build:
      context: ./nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend-api
      - frontend-app
      - frontend-admin
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - hairai-network

  # Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: hairai_user
      POSTGRES_PASSWORD: hairai_password
      POSTGRES_DB: hairai_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - hairai-network

  # Message Queue
  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: hairai_user
      RABBITMQ_DEFAULT_PASS: hairai_password
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - hairai-network

  # Backend API
  backend-api:
    build:
      context: ./Backend
      dockerfile: Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Server=postgres;Port=5432;Database=hairai_db;User Id=hairai_user;Password=hairai_password;
      - RabbitMQ__ConnectionString=amqp://hairai_user:hairai_password@rabbitmq:5672
    ports:
      - "5000:8080"
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - hairai-network

  # AI Worker
  ai-worker:
    build:
      context: ./AI_Worker
      dockerfile: Dockerfile
    environment:
      - RABBITMQ_CONNECTION_STRING=amqp://hairai_user:hairai_password@rabbitmq:5672
      - DATABASE_CONNECTION_STRING=Server=postgres;Port=5432;Database=hairai_db;User Id=hairai_user;Password=hairai_password;
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - hairai-network

  # Frontend Application
  frontend-app:
    build:
      context: ./Frontend/App
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
    networks:
      - hairai-network

  # Frontend Admin Dashboard
  frontend-admin:
    build:
      context: ./Frontend/AdminDashboard
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
    networks:
      - hairai-network

volumes:
  postgres_data:
  rabbitmq_data:

networks:
  hairai-network:
    driver: bridge